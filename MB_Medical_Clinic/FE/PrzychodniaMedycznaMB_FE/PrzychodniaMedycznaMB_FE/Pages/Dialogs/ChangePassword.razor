@using MudBlazor
@using System.Text.RegularExpressions
@using PrzychodniaMedycznaMB_FE.GQL
@using PrzychodniaMedycznaMB_FE.GQL.Server


<MudDialog>
    <TitleContent>
        Zmiana hasła
    </TitleContent>
    <DialogContent>

       
        <MudGrid>
            <MudItem lg="12" md="12" sm="12" xs="12">
                 <MudTextField T="string" Label="Hasło" InputType="InputType.Password" @bind-Value="old_password"/>
            </MudItem>
            <MudItem lg="12" md="12" sm="12" xs="12">
                 <MudTextField T="string" Label="Nowe hasło" @bind-Value="new_password"
                                      InputType="InputType.Password"
                                      Required="true"
                                      RequiredError="Password is required!"/>
            </MudItem>
            <MudItem lg="12" md="12" sm="12" xs="12">
                 <MudTextField T="string" Label="Powtórz nowe hasło" InputType="InputType.Password" @bind-Value="repeat_password"/>
            </MudItem>
             <MudItem lg="12" md="12" sm="12" xs="12">
                @if(errors is not null && errors.Count > 0)
                {
                    @foreach(var error in errors)
                    {
                        <MudAlert Severity="Severity.Error">@error</MudAlert>
                    }
                }
            </MudItem>
        </MudGrid>
           
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zmień hasło</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Inject] public IServerHelper _serverHelper { get; set; } = default!;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    public bool success;
    public string old_password = default!;
    public string new_password = default!;
    public string repeat_password = default!;
    List<string> errors = new();

    private void PasswordStrength()
    {
        if (string.IsNullOrWhiteSpace(old_password))
        {
            errors.Add("Old password is required!");
        }

        if (string.IsNullOrWhiteSpace(new_password))
        {
            errors.Add("New password is required!");
        }

        if (new_password.Length < 8)
            errors.Add("Password must be at least of length 8");

        if (!Regex.IsMatch(new_password, @"[A-Z]"))
            errors.Add("Password must contain at least one capital letter");

        if (!Regex.IsMatch(new_password, @"[a-z]"))
            errors.Add("Password must contain at least one lowercase letter");

        if (!Regex.IsMatch(new_password, @"[0-9]"))
            errors.Add("Password must contain at least one digit");

        if (new_password != repeat_password)
            errors.Add("Passwords don't match");
    }


    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        PasswordStrength();

        if(errors.Count == 0 && ProjectVariables.CurrentUserId is not null)
        {
            bool result = await _serverHelper.ChangePassword(ProjectVariables.CurrentUserId, old_password, new_password);
            MudDialog.Close(DialogResult.Ok(result));
        }
        else
        {
            await Task.Delay(1000);
            old_password = default!;
            new_password = default!;
            repeat_password = default!;
            errors = new();
        }
    }
}
